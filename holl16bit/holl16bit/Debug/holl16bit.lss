
holl16bit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000250  000002e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000250  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  00800102  00800102  000002e6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000318  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000358  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008d5  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000074e  00000000  00000000  00000c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000339  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e8  00000000  00000000  00001704  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003c1  00000000  00000000  000017ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002b4  00000000  00000000  00001bad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001e61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 31       	cpi	r26, 0x10	; 16
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  9e:	0c 94 26 01 	jmp	0x24c	; 0x24c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_Init>:
#define MYUBRR ((FOSC/16/BAUD)-1)

void USART_Init( unsigned int ubrr)
{
 //Set baud rate
 UBRR0H = (unsigned char)(ubrr>>8);
  a6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 UBRR0L = (unsigned char)ubrr;
  aa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 // Enable receiver and transmitter
 UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 // Set frame format: 8data, 2stop bit
 UCSR0C = (1<<USBS0)|(3<<UCSZ00);
  b4:	8e e0       	ldi	r24, 0x0E	; 14
  b6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ba:	08 95       	ret

000000bc <USART_Transmit>:
}

void USART_Transmit( unsigned char data )
{
 // Wait for empty transmit buffer
 while ( !( UCSR0A & (1<<UDRE0)) )
  bc:	e0 ec       	ldi	r30, 0xC0	; 192
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	90 81       	ld	r25, Z
  c2:	95 ff       	sbrs	r25, 5
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <USART_Transmit+0x4>
 ;
 // Put data into buffer, sends the data
 UDR0 = data;
  c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
  ca:	08 95       	ret

000000cc <setup>:
}

void setup() {
//  Serial.begin(9600);
//  DDRD  = 0xFF;   //настройка всех выводов порта D как выходов
  DDRC = 0; //настройка всех выводов порта C как входов
  cc:	17 b8       	out	0x07, r1	; 7
  PORTC = 1;  
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	88 b9       	out	0x08, r24	; 8
  
  TCCR1A = 0;         // настройка таймера 1, канала А
  d2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  TCCR1B = 0x1;        // предделитель CLK/1024;
  d6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  OCR1A = 0x01FF; // прерывание раз в секунду на частоте 16MГц
  da:	8f ef       	ldi	r24, 0xFF	; 255
  dc:	91 e0       	ldi	r25, 0x01	; 1
  de:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  e2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  TIMSK1 = 0b00000010; // запуск таймера по совпадению 1А
  e6:	82 e0       	ldi	r24, 0x02	; 2
  e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

  sei();              // разрешаем прерывания (запрещаем: cli(); )
  ec:	78 94       	sei
  USART_Init(MYUBRR);
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
  f6:	08 95       	ret

000000f8 <__vector_11>:
}

ISR(TIMER1_COMPA_vect)  //обработчик прерывания по совпадению 1А
{
  f8:	1f 92       	push	r1
  fa:	0f 92       	push	r0
  fc:	0f b6       	in	r0, 0x3f	; 63
  fe:	0f 92       	push	r0
 100:	11 24       	eor	r1, r1
 102:	2f 93       	push	r18
 104:	3f 93       	push	r19
 106:	4f 93       	push	r20
 108:	5f 93       	push	r21
 10a:	6f 93       	push	r22
 10c:	7f 93       	push	r23
 10e:	8f 93       	push	r24
 110:	9f 93       	push	r25
 112:	af 93       	push	r26
 114:	bf 93       	push	r27
 116:	cf 93       	push	r28
 118:	df 93       	push	r29
 11a:	ef 93       	push	r30
 11c:	ff 93       	push	r31
  USART_Transmit(' ');
 11e:	80 e2       	ldi	r24, 0x20	; 32
 120:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
  
  itoa(frequency,str,10);
 124:	4a e0       	ldi	r20, 0x0A	; 10
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	68 e0       	ldi	r22, 0x08	; 8
 12a:	71 e0       	ldi	r23, 0x01	; 1
 12c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
 130:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_end+0x1>
 134:	0e 94 e6 00 	call	0x1cc	; 0x1cc <itoa>
  USART_Transmit(str[0]);
 138:	c8 e0       	ldi	r28, 0x08	; 8
 13a:	d1 e0       	ldi	r29, 0x01	; 1
 13c:	88 81       	ld	r24, Y
 13e:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
  USART_Transmit(str[1]);
 142:	89 81       	ldd	r24, Y+1	; 0x01
 144:	0e 94 5e 00 	call	0xbc	; 0xbc <USART_Transmit>
  USART_Transmit(str[3]);
  USART_Transmit(str[4]);
  USART_Transmit(str[5]);
  USART_Transmit(str[6]);
  USART_Transmit(str[7]);*/
  if (seconds > 2) {
 148:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <seconds>
 14c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <seconds+0x1>
 150:	03 97       	sbiw	r24, 0x03	; 3
 152:	6c f0       	brlt	.+26     	; 0x16e <__vector_11+0x76>
    seconds = 0;
 154:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <seconds+0x1>
 158:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <seconds>
    frequency = counter;
 15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 160:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 164:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_end+0x1>
 168:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 16c:	13 c0       	rjmp	.+38     	; 0x194 <__vector_11+0x9c>
    //counter = 0;
//  Serial.println("DEFAULT");
  }
  else {
    seconds++;
 16e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <seconds>
 172:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <seconds+0x1>
 176:	01 96       	adiw	r24, 0x01	; 1
 178:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <seconds+0x1>
 17c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <seconds>
    if (seconds == 3)
 180:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <seconds>
 184:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <seconds+0x1>
 188:	03 97       	sbiw	r24, 0x03	; 3
 18a:	21 f4       	brne	.+8      	; 0x194 <__vector_11+0x9c>
  counter = 0;
 18c:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__data_start+0x1>
 190:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
//    Serial.println(counter);
  }
//  PORTD = ~ PORTD;
  //обнуляем регистр TCNT
  TCNT1 = 0;
 194:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 198:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
}
 19c:	ff 91       	pop	r31
 19e:	ef 91       	pop	r30
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	bf 91       	pop	r27
 1a6:	af 91       	pop	r26
 1a8:	9f 91       	pop	r25
 1aa:	8f 91       	pop	r24
 1ac:	7f 91       	pop	r23
 1ae:	6f 91       	pop	r22
 1b0:	5f 91       	pop	r21
 1b2:	4f 91       	pop	r20
 1b4:	3f 91       	pop	r19
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <main>:
}
}*/

int main(void)
{
	setup();
 1c2:	0e 94 66 00 	call	0xcc	; 0xcc <setup>
    /* Replace with your application code */
//	loop();
}
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	08 95       	ret

000001cc <itoa>:
 1cc:	45 32       	cpi	r20, 0x25	; 37
 1ce:	51 05       	cpc	r21, r1
 1d0:	20 f4       	brcc	.+8      	; 0x1da <itoa+0xe>
 1d2:	42 30       	cpi	r20, 0x02	; 2
 1d4:	10 f0       	brcs	.+4      	; 0x1da <itoa+0xe>
 1d6:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <__itoa_ncheck>
 1da:	fb 01       	movw	r30, r22
 1dc:	10 82       	st	Z, r1
 1de:	cb 01       	movw	r24, r22
 1e0:	08 95       	ret

000001e2 <__itoa_ncheck>:
 1e2:	bb 27       	eor	r27, r27
 1e4:	4a 30       	cpi	r20, 0x0A	; 10
 1e6:	31 f4       	brne	.+12     	; 0x1f4 <__itoa_ncheck+0x12>
 1e8:	99 23       	and	r25, r25
 1ea:	22 f4       	brpl	.+8      	; 0x1f4 <__itoa_ncheck+0x12>
 1ec:	bd e2       	ldi	r27, 0x2D	; 45
 1ee:	90 95       	com	r25
 1f0:	81 95       	neg	r24
 1f2:	9f 4f       	sbci	r25, 0xFF	; 255
 1f4:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__utoa_common>

000001f8 <__utoa_ncheck>:
 1f8:	bb 27       	eor	r27, r27

000001fa <__utoa_common>:
 1fa:	fb 01       	movw	r30, r22
 1fc:	55 27       	eor	r21, r21
 1fe:	aa 27       	eor	r26, r26
 200:	88 0f       	add	r24, r24
 202:	99 1f       	adc	r25, r25
 204:	aa 1f       	adc	r26, r26
 206:	a4 17       	cp	r26, r20
 208:	10 f0       	brcs	.+4      	; 0x20e <__utoa_common+0x14>
 20a:	a4 1b       	sub	r26, r20
 20c:	83 95       	inc	r24
 20e:	50 51       	subi	r21, 0x10	; 16
 210:	b9 f7       	brne	.-18     	; 0x200 <__utoa_common+0x6>
 212:	a0 5d       	subi	r26, 0xD0	; 208
 214:	aa 33       	cpi	r26, 0x3A	; 58
 216:	08 f0       	brcs	.+2      	; 0x21a <__utoa_common+0x20>
 218:	a9 5d       	subi	r26, 0xD9	; 217
 21a:	a1 93       	st	Z+, r26
 21c:	00 97       	sbiw	r24, 0x00	; 0
 21e:	79 f7       	brne	.-34     	; 0x1fe <__utoa_common+0x4>
 220:	b1 11       	cpse	r27, r1
 222:	b1 93       	st	Z+, r27
 224:	11 92       	st	Z+, r1
 226:	cb 01       	movw	r24, r22
 228:	0c 94 16 01 	jmp	0x22c	; 0x22c <strrev>

0000022c <strrev>:
 22c:	dc 01       	movw	r26, r24
 22e:	fc 01       	movw	r30, r24
 230:	67 2f       	mov	r22, r23
 232:	71 91       	ld	r23, Z+
 234:	77 23       	and	r23, r23
 236:	e1 f7       	brne	.-8      	; 0x230 <strrev+0x4>
 238:	32 97       	sbiw	r30, 0x02	; 2
 23a:	04 c0       	rjmp	.+8      	; 0x244 <strrev+0x18>
 23c:	7c 91       	ld	r23, X
 23e:	6d 93       	st	X+, r22
 240:	70 83       	st	Z, r23
 242:	62 91       	ld	r22, -Z
 244:	ae 17       	cp	r26, r30
 246:	bf 07       	cpc	r27, r31
 248:	c8 f3       	brcs	.-14     	; 0x23c <strrev+0x10>
 24a:	08 95       	ret

0000024c <_exit>:
 24c:	f8 94       	cli

0000024e <__stop_program>:
 24e:	ff cf       	rjmp	.-2      	; 0x24e <__stop_program>
