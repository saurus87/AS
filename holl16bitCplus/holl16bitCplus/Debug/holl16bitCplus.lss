
holl16bitCplus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000266  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000002da  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000030c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000058  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000099e  00000000  00000000  000003a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b7  00000000  00000000  00000d42  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000037e  00000000  00000000  000014f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d4  00000000  00000000  00001878  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000451  00000000  00000000  0000194c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002f1  00000000  00000000  00001d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000208e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__vector_11>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <main>
  88:	0c 94 31 01 	jmp	0x262	; 0x262 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <_Z9setup_TC1v>:
			}
			prev = real;
		}
	}
	return (int)frequency/2;
  90:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
  94:	85 e0       	ldi	r24, 0x05	; 5
  96:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  9a:	89 e0       	ldi	r24, 0x09	; 9
  9c:	9d e3       	ldi	r25, 0x3D	; 61
  9e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  a6:	82 e0       	ldi	r24, 0x02	; 2
  a8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
  ac:	78 94       	sei
  ae:	08 95       	ret

000000b0 <__vector_11>:
  b0:	1f 92       	push	r1
  b2:	0f 92       	push	r0
  b4:	0f b6       	in	r0, 0x3f	; 63
  b6:	0f 92       	push	r0
  b8:	11 24       	eor	r1, r1
  ba:	8f 93       	push	r24
  bc:	9f 93       	push	r25
  be:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  c2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  c6:	03 97       	sbiw	r24, 0x03	; 3
  c8:	28 f0       	brcs	.+10     	; 0xd4 <__vector_11+0x24>
  ca:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
  ce:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  d2:	09 c0       	rjmp	.+18     	; 0xe6 <__vector_11+0x36>
  d4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  d8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
  e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
  ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
  ee:	9f 91       	pop	r25
  f0:	8f 91       	pop	r24
  f2:	0f 90       	pop	r0
  f4:	0f be       	out	0x3f, r0	; 63
  f6:	0f 90       	pop	r0
  f8:	1f 90       	pop	r1
  fa:	18 95       	reti

000000fc <_Z4freqjjj>:
  fc:	ff 92       	push	r15
  fe:	0f 93       	push	r16
 100:	1f 93       	push	r17
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	d0 e0       	ldi	r29, 0x00	; 0
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	10 e0       	ldi	r17, 0x00	; 0
 10e:	46 0f       	add	r20, r22
 110:	57 1f       	adc	r21, r23
 112:	31 e0       	ldi	r19, 0x01	; 1
 114:	f1 2c       	mov	r15, r1
 116:	01 c0       	rjmp	.+2      	; 0x11a <_Z4freqjjj+0x1e>
 118:	ec 01       	movw	r28, r24
 11a:	a0 91 00 01 	lds	r26, 0x0100	; 0x800100 <_edata>
 11e:	b0 91 01 01 	lds	r27, 0x0101	; 0x800101 <_edata+0x1>
 122:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <_edata>
 126:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <_edata+0x1>
 12a:	23 2f       	mov	r18, r19
 12c:	4e 17       	cp	r20, r30
 12e:	5f 07       	cpc	r21, r31
 130:	08 f4       	brcc	.+2      	; 0x134 <_Z4freqjjj+0x38>
 132:	2f 2d       	mov	r18, r15
 134:	22 23       	and	r18, r18
 136:	89 f0       	breq	.+34     	; 0x15a <_Z4freqjjj+0x5e>
 138:	23 2f       	mov	r18, r19
 13a:	a6 17       	cp	r26, r22
 13c:	b7 07       	cpc	r27, r23
 13e:	08 f4       	brcc	.+2      	; 0x142 <_Z4freqjjj+0x46>
 140:	2f 2d       	mov	r18, r15
 142:	22 23       	and	r18, r18
 144:	51 f0       	breq	.+20     	; 0x15a <_Z4freqjjj+0x5e>
 146:	26 b1       	in	r18, 0x06	; 6
 148:	82 2f       	mov	r24, r18
 14a:	81 70       	andi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	c8 17       	cp	r28, r24
 150:	d9 07       	cpc	r29, r25
 152:	11 f3       	breq	.-60     	; 0x118 <_Z4freqjjj+0x1c>
 154:	0f 5f       	subi	r16, 0xFF	; 255
 156:	1f 4f       	sbci	r17, 0xFF	; 255
 158:	df cf       	rjmp	.-66     	; 0x118 <_Z4freqjjj+0x1c>
 15a:	c8 01       	movw	r24, r16
 15c:	99 23       	and	r25, r25
 15e:	0c f4       	brge	.+2      	; 0x162 <_Z4freqjjj+0x66>
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	95 95       	asr	r25
 164:	87 95       	ror	r24
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	1f 91       	pop	r17
 16c:	0f 91       	pop	r16
 16e:	ff 90       	pop	r15
 170:	08 95       	ret

00000172 <_Z10USART_Initj>:
#define MYUBRR ((FOSC/16/BAUD)-1)

void USART_Init( unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char)(ubrr>>8);
 172:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char)ubrr;
 176:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	// Enable receiver and transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 17a:	88 e1       	ldi	r24, 0x18	; 24
 17c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	// Set frame format: 8data, 2stop bit
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 180:	8e e0       	ldi	r24, 0x0E	; 14
 182:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 186:	08 95       	ret

00000188 <_Z14USART_Transmith>:
}

void USART_Transmit( unsigned char data )
{
	// Wait for empty transmit buffer
	while ( !( UCSR0A & (1<<UDRE0)) )
 188:	e0 ec       	ldi	r30, 0xC0	; 192
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	90 81       	ld	r25, Z
 18e:	95 ff       	sbrs	r25, 5
 190:	fd cf       	rjmp	.-6      	; 0x18c <_Z14USART_Transmith+0x4>
	;
	// Put data into buffer, sends the data
	UDR0 = data;
 192:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 196:	08 95       	ret

00000198 <_Z4loopv>:
	sei();              // разрешаем прерывания (запрещаем: cli(); )
	USART_Init(MYUBRR);
}
*/

void loop() {
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	cd b7       	in	r28, 0x3d	; 61
 19e:	de b7       	in	r29, 0x3e	; 62
 1a0:	28 97       	sbiw	r28, 0x08	; 8
 1a2:	0f b6       	in	r0, 0x3f	; 63
 1a4:	f8 94       	cli
 1a6:	de bf       	out	0x3e, r29	; 62
 1a8:	0f be       	out	0x3f, r0	; 63
 1aa:	cd bf       	out	0x3d, r28	; 61
	int i;	
	char str[8];
while(1)
{
//	freq(4,3,1);
	USART_Transmit(' ');
 1ac:	80 e2       	ldi	r24, 0x20	; 32
 1ae:	0e 94 c4 00 	call	0x188	; 0x188 <_Z14USART_Transmith>
	i=freq(4,3,1);
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	50 e0       	ldi	r21, 0x00	; 0
 1b6:	63 e0       	ldi	r22, 0x03	; 3
 1b8:	70 e0       	ldi	r23, 0x00	; 0
 1ba:	84 e0       	ldi	r24, 0x04	; 4
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 7e 00 	call	0xfc	; 0xfc <_Z4freqjjj>
	if (i>0)
 1c2:	18 16       	cp	r1, r24
 1c4:	19 06       	cpc	r1, r25
 1c6:	34 f4       	brge	.+12     	; 0x1d4 <_Z4loopv+0x3c>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 1c8:	4a e0       	ldi	r20, 0x0A	; 10
 1ca:	be 01       	movw	r22, r28
 1cc:	6f 5f       	subi	r22, 0xFF	; 255
 1ce:	7f 4f       	sbci	r23, 0xFF	; 255
 1d0:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__itoa_ncheck>

	itoa(i,str,10);
	USART_Transmit(str[0]);
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
 1d6:	0e 94 c4 00 	call	0x188	; 0x188 <_Z14USART_Transmith>
	USART_Transmit(str[1]);
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	0e 94 c4 00 	call	0x188	; 0x188 <_Z14USART_Transmith>
*/

void loop() {
	int i;	
	char str[8];
while(1)
 1e0:	e5 cf       	rjmp	.-54     	; 0x1ac <_Z4loopv+0x14>

000001e2 <main>:
}

int main(void)
{
	//  DDRD  = 0xFF;   //настройка всех выводов порта D как выходов
	DDRC = 0; //настройка всех выводов порта C как входов
 1e2:	17 b8       	out	0x07, r1	; 7
	PORTC = 1;	
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	88 b9       	out	0x08, r24	; 8
	USART_Init(MYUBRR);
 1e8:	87 e6       	ldi	r24, 0x67	; 103
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	0e 94 b9 00 	call	0x172	; 0x172 <_Z10USART_Initj>
	
	setup_TC1();
 1f0:	0e 94 48 00 	call	0x90	; 0x90 <_Z9setup_TC1v>
    /* Replace with your application code */
	loop();
 1f4:	0e 94 cc 00 	call	0x198	; 0x198 <_Z4loopv>

000001f8 <__itoa_ncheck>:
 1f8:	bb 27       	eor	r27, r27
 1fa:	4a 30       	cpi	r20, 0x0A	; 10
 1fc:	31 f4       	brne	.+12     	; 0x20a <__itoa_ncheck+0x12>
 1fe:	99 23       	and	r25, r25
 200:	22 f4       	brpl	.+8      	; 0x20a <__itoa_ncheck+0x12>
 202:	bd e2       	ldi	r27, 0x2D	; 45
 204:	90 95       	com	r25
 206:	81 95       	neg	r24
 208:	9f 4f       	sbci	r25, 0xFF	; 255
 20a:	0c 94 08 01 	jmp	0x210	; 0x210 <__utoa_common>

0000020e <__utoa_ncheck>:
 20e:	bb 27       	eor	r27, r27

00000210 <__utoa_common>:
 210:	fb 01       	movw	r30, r22
 212:	55 27       	eor	r21, r21
 214:	aa 27       	eor	r26, r26
 216:	88 0f       	add	r24, r24
 218:	99 1f       	adc	r25, r25
 21a:	aa 1f       	adc	r26, r26
 21c:	a4 17       	cp	r26, r20
 21e:	10 f0       	brcs	.+4      	; 0x224 <__utoa_common+0x14>
 220:	a4 1b       	sub	r26, r20
 222:	83 95       	inc	r24
 224:	50 51       	subi	r21, 0x10	; 16
 226:	b9 f7       	brne	.-18     	; 0x216 <__utoa_common+0x6>
 228:	a0 5d       	subi	r26, 0xD0	; 208
 22a:	aa 33       	cpi	r26, 0x3A	; 58
 22c:	08 f0       	brcs	.+2      	; 0x230 <__utoa_common+0x20>
 22e:	a9 5d       	subi	r26, 0xD9	; 217
 230:	a1 93       	st	Z+, r26
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	79 f7       	brne	.-34     	; 0x214 <__utoa_common+0x4>
 236:	b1 11       	cpse	r27, r1
 238:	b1 93       	st	Z+, r27
 23a:	11 92       	st	Z+, r1
 23c:	cb 01       	movw	r24, r22
 23e:	0c 94 21 01 	jmp	0x242	; 0x242 <strrev>

00000242 <strrev>:
 242:	dc 01       	movw	r26, r24
 244:	fc 01       	movw	r30, r24
 246:	67 2f       	mov	r22, r23
 248:	71 91       	ld	r23, Z+
 24a:	77 23       	and	r23, r23
 24c:	e1 f7       	brne	.-8      	; 0x246 <strrev+0x4>
 24e:	32 97       	sbiw	r30, 0x02	; 2
 250:	04 c0       	rjmp	.+8      	; 0x25a <strrev+0x18>
 252:	7c 91       	ld	r23, X
 254:	6d 93       	st	X+, r22
 256:	70 83       	st	Z, r23
 258:	62 91       	ld	r22, -Z
 25a:	ae 17       	cp	r26, r30
 25c:	bf 07       	cpc	r27, r31
 25e:	c8 f3       	brcs	.-14     	; 0x252 <strrev+0x10>
 260:	08 95       	ret

00000262 <_exit>:
 262:	f8 94       	cli

00000264 <__stop_program>:
 264:	ff cf       	rjmp	.-2      	; 0x264 <__stop_program>
